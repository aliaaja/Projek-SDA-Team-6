class Kendaraan:
    def __init__(self, id_kendaraan, jenis_kendaraan, nama_driver, kapasitas, ketersediaan):
        self.id_kendaraan = id_kendaraan
        self.jenis_kendaraan = jenis_kendaraan
        self.nama_driver = nama_driver
        self.kapasitas = kapasitas
        self.ketersediaan = ketersediaan

    def __str__(self):
        return f"ID: {self.id_kendaraan}, Jenis: {self.jenis_kendaraan}, Driver: {self.nama_driver}, Kapasitas: {self.kapasitas}, Tersedia: {self.ketersediaan}"

class PemesananKendaraan:
    def __init__(self, id_pemesanan, nama_pelanggan, id_kendaraan, lokasi_jemput, lokasi_tujuan):
        self.id_pemesanan = id_pemesanan
        self.nama_pelanggan = nama_pelanggan
        self.id_kendaraan = id_kendaraan
        self.lokasi_jemput = lokasi_jemput
        self.lokasi_tujuan = lokasi_tujuan

    def __str__(self):
        return f"ID Pemesanan: {self.id_pemesanan}, Pelanggan: {self.nama_pelanggan}, ID Kendaraan: {self.id_kendaraan}, Jemput: {self.lokasi_jemput}, Tujuan: {self.lokasi_tujuan}"

class ManajemenKendaraan:
    def __init__(self):
        self.list_kendaraan = []

    def daftar_kendaraan(self):
        if not self.list_kendaraan:
            return None
        return "\n".join(str(kendaraan) for kendaraan in self.list_kendaraan)

    def update_kendaraan(self, id_kendaraan, jenis_kendaraan=None, nama_driver=None, kapasitas=None, ketersediaan=None):
        for kendaraan in self.list_kendaraan:
            if kendaraan.id_kendaraan == id_kendaraan:
                if jenis_kendaraan:
                    kendaraan.jenis_kendaraan = jenis_kendaraan
                if nama_driver:
                    kendaraan.nama_driver = nama_driver
                if kapasitas is not None:
                    kendaraan.kapasitas = kapasitas
                if ketersediaan is not None:
                    kendaraan.ketersediaan = ketersediaan
                messagebox.showinfo("Berhasil", f"Kendaraan {id_kendaraan} berhasil diperbarui.")
                return
        messagebox.showwarning("Error", f"Tidak ada kendaraan dengan ID {id_kendaraan}")

    def hapus_kendaraan(self, id_kendaraan):
        for kendaraan in self.list_kendaraan:
            if kendaraan.id_kendaraan == id_kendaraan:
                self.list_kendaraan.remove(kendaraan)
                messagebox.showinfo("Berhasil", f"Kendaraan {id_kendaraan} berhasil dihapus.")
                return
        messagebox.showwarning("Error", f"Tidak ada kendaraan dengan ID {id_kendaraan}")

    def tambah_kendaraan(self, id_kendaraan, jenis_kendaraan, nama_driver, kapasitas, ketersediaan):
        for kendaraan in self.list_kendaraan:
            if kendaraan.id_kendaraan == id_kendaraan:
                messagebox.showwarning("Error", f"Kendaraan dengan ID {id_kendaraan} sudah ada.")
                return
        kendaraan_baru = Kendaraan(id_kendaraan, jenis_kendaraan, nama_driver, kapasitas, ketersediaan)
        self.list_kendaraan.append(kendaraan_baru)
        messagebox.showinfo("Berhasil", f"Kendaraan {id_kendaraan} berhasil ditambahkan.")

    def cari_kendaraan_tersedia(self, jenis_kendaraan):
        for kendaraan in self.list_kendaraan:
            if kendaraan.jenis_kendaraan == jenis_kendaraan and kendaraan.ketersediaan:
                return kendaraan
        return None

    def atur_ketersediaan_kendaraan(self, id_kendaraan, ketersediaan):
        for kendaraan in self.list_kendaraan:
            if kendaraan.id_kendaraan == id_kendaraan:
                kendaraan.ketersediaan = ketersediaan
                return
    def atur_ketersediaan_kendaraan(self, id_kendaraan, ketersediaan):
        for kendaraan in self.list_kendaraan:
            if kendaraan.id_kendaraan == id_kendaraan:
                kendaraan.ketersediaan = ketersediaan
                return

class Pemesanan:
    def __init__(self, manajemen_kendaraan):
        self.manajemen_kendaraan = manajemen_kendaraan
        self.list_pemesanan = []
        self.counter_id_pemesanan = 1

    def pesan_kendaraan(self, nama_pelanggan, jenis_kendaraan, lokasi_jemput, lokasi_tujuan):
        kendaraan = self.manajemen_kendaraan.cari_kendaraan_tersedia(jenis_kendaraan)
        if kendaraan:
            kendaraan.ketersediaan = False
            pemesanan = PemesananKendaraan(
                id_pemesanan=self.counter_id_pemesanan,
                nama_pelanggan=nama_pelanggan,
                id_kendaraan=kendaraan.id_kendaraan,
                lokasi_jemput=lokasi_jemput,
                lokasi_tujuan=lokasi_tujuan
            )
            self.list_pemesanan.append(pemesanan)
            self.counter_id_pemesanan += 1
            messagebox.showinfo("Berhasil", f"Pemesanan berhasil: {pemesanan}")
        else:
            messagebox.showwarning("Tidak Ada Kendaraan", "Tidak ada kendaraan tersedia untuk jenis yang dipilih.")

class AplikasiPemesanan:
    def __init__(self, root):
        self.manajemen_kendaraan = ManajemenKendaraan()
        self.sistem = Pemesanan(self.manajemen_kendaraan)
        self.root = root
        self.root.title("Sistem Pemesanan Kendaraan")

        # Membuat frame untuk antarmuka
        self.frame = tk.Frame(root)
        self.frame.pack(pady=10, padx=10)

        self.title_label = tk.Label(self.frame, text="Pesan Kendaraan Online", font=("Helvetica", 16, "bold"))
        self.title_label.grid(row=0, columnspan=2, pady=10)

        self.pesan_button = tk.Button(self.frame, text="Pesan Kendaraan", command=self.pesan_kendaraan)
        self.pesan_button.grid(row=1, columnspan=2, pady=5)

        self.title_label = tk.Label(self.frame, text="Manajemen Kendaraan", font=("Helvetica", 16, "bold"))
        self.title_label.grid(row=2, columnspan=2, pady=10)

        self.daftar_button = tk.Button(self.frame, text="Daftar Semua Kendaraan", command=self.daftar_kendaraan)
        self.daftar_button.grid(row=3, column=0, pady=5)

        self.tambah_kendaraan_button = tk.Button(self.frame, text="Tambah Kendaraan", command=self.tambah_kendaraan)
        self.tambah_kendaraan_button.grid(row=3, column=1, pady=5)

        self.update_kendaraan_button = tk.Button(self.frame, text="Perbarui Kendaraan", command=self.update_kendaraan)
        self.update_kendaraan_button.grid(row=4, column=0, pady=5)

        self.hapus_kendaraan_button = tk.Button(self.frame, text="Hapus Kendaraan", command=self.hapus_kendaraan)
        self.hapus_kendaraan_button.grid(row=4, column=1, pady=5)

        self.keluar_button = tk.Button(self.frame, text="Keluar", command=root.quit)
        self.keluar_button.grid(row=5, columnspan=2, pady=10)

    def daftar_kendaraan(self):
        kendaraan = self.manajemen_kendaraan.daftar_kendaraan()
        if kendaraan is None:
            messagebox.showinfo("Kendaraan Tidak Tersedia", "Kendaraan tidak tersedia saat ini.")
        else:
            messagebox.showinfo("Daftar Kendaraan", kendaraan)

    def pesan_kendaraan(self):
        self.booking_window = tk.Toplevel(self.root)
        self.booking_window.title("Pesan Kendaraan")
        self.booking_frame = tk.Frame(self.booking_window, pady=10, padx=10)
        self.booking_frame.pack()

        tk.Label(self.booking_frame, text="Nama Pelanggan").grid(row=0, column=0, sticky="w")
        self.nama_pelanggan_entry = tk.Entry(self.booking_frame)
        self.nama_pelanggan_entry.grid(row=0, column=1)

        tk.Label(self.booking_frame, text="Jenis Kendaraan (motor/mobil)").grid(row=1, column=0, sticky="w")
        self.jenis_kendaraan_entry = tk.Entry(self.booking_frame)
        self.jenis_kendaraan_entry.grid(row=1, column=1)

        tk.Label(self.booking_frame, text="Lokasi Jemput").grid(row=2, column=0, sticky="w")
        self.lokasi_jemput_entry = tk.Entry(self.booking_frame)
        self.lokasi_jemput_entry.grid(row=2, column=1)

        tk.Label(self.booking_frame, text="Lokasi Tujuan").grid(row=3, column=0, sticky="w")
        self.lokasi_tujuan_entry = tk.Entry(self.booking_frame)
        self.lokasi_tujuan_entry.grid(row=3, column=1)

        tk.Button(self.booking_frame, text="Pesan", command=self.konfirmasi_pemesanan).grid(row=4, columnspan=2, pady=10)

    def konfirmasi_pemesanan(self):
        nama_pelanggan = self.nama_pelanggan_entry.get()
        jenis_kendaraan = self.jenis_kendaraan_entry.get()
        lokasi_jemput = self.lokasi_jemput_entry.get()
        lokasi_tujuan = self.lokasi_tujuan_entry.get()

        if not nama_pelanggan or not jenis_kendaraan or not lokasi_jemput or not lokasi_tujuan:
            messagebox.showwarning("Input Error", "Semua field harus diisi!")
            return

        self.sistem.pesan_kendaraan(nama_pelanggan, jenis_kendaraan, lokasi_jemput, lokasi_tujuan)
        self.booking_window.destroy()

    def tambah_kendaraan(self):
        self.add_window = tk.Toplevel(self.root)
        self.add_window.title("Tambah Kendaraan")
        self.add_frame = tk.Frame(self.add_window, pady=10, padx=10)
        self.add_frame.pack()

        tk.Label(self.add_frame, text="ID Kendaraan").grid(row=0, column=0, sticky="w")
        self.id_kendaraan_entry = tk.Entry(self.add_frame)
        self.id_kendaraan_entry.grid(row=0, column=1)

        tk.Label(self.add_frame, text="Jenis Kendaraan (motor/mobil)").grid(row=1, column=0, sticky="w")
        self.jenis_kendaraan_entry = tk.Entry(self.add_frame)
        self.jenis_kendaraan_entry.grid(row=1, column=1)

        tk.Label(self.add_frame, text="Nama Driver").grid(row=2, column=0, sticky="w")
        self.nama_driver_entry = tk.Entry(self.add_frame)
        self.nama_driver_entry.grid(row=2, column=1)

        tk.Label(self.add_frame, text="Kapasitas").grid(row=3, column=0, sticky="w")
        self.kapasitas_entry = tk.Entry(self.add_frame)
        self.kapasitas_entry.grid(row=3, column=1)

        tk.Label(self.add_frame, text="Ketersediaan (True/False)").grid(row=4, column=0, sticky="w")
        self.ketersediaan_entry = tk.Entry(self.add_frame)
        self.ketersediaan_entry.grid(row=4, column=1)

        tk.Button(self.add_frame, text="Tambah", command=self.konfirmasi_tambah_kendaraan).grid(row=5, columnspan=2, pady=10)

    def konfirmasi_tambah_kendaraan(self):
        id_kendaraan = self.id_kendaraan_entry.get()
        jenis_kendaraan = self.jenis_kendaraan_entry.get()
        nama_driver = self.nama_driver_entry.get()
        kapasitas = self.kapasitas_entry.get()
        ketersediaan = self.ketersediaan_entry.get()

        if not id_kendaraan or not jenis_kendaraan or not nama_driver or not kapasitas or not ketersediaan:
            messagebox.showwarning("Input Error", "Semua field harus diisi!")
            return

        try:
            kapasitas = int(kapasitas)
            ketersediaan = ketersediaan.lower() == 'true'
        except ValueError:
            messagebox.showwarning("Input Error", "Kapasitas harus berupa angka dan ketersediaan harus True atau False.")
            return

        self.manajemen_kendaraan.tambah_kendaraan(id_kendaraan, jenis_kendaraan, nama_driver, kapasitas, ketersediaan)
        self.add_window.destroy()

    def update_kendaraan(self):
        self.update_window = tk.Toplevel(self.root)
        self.update_window.title("Perbarui Kendaraan")
        self.update_frame = tk.Frame(self.update_window, pady=10, padx=10)
        self.update_frame.pack()

        tk.Label(self.update_frame, text="ID Kendaraan", anchor="w").grid(row=0, column=0, sticky="w")
        self.perbarui_id_kendaraan_entry = tk.Entry(self.update_frame)
        self.perbarui_id_kendaraan_entry.grid(row=0, column=1)

        tk.Label(self.update_frame, text="Jenis Kendaraan (motor/mobil)", anchor="w").grid(row=1, column=0, sticky="w")
        self.perbarui_jenis_kendaraan_entry = tk.Entry(self.update_frame)
        self.perbarui_jenis_kendaraan_entry.grid(row=1, column=1)

        tk.Label(self.update_frame, text="Nama Driver", anchor="w").grid(row=2, column=0, sticky="w")
        self.perbarui_nama_driver_entry = tk.Entry(self.update_frame)
        self.perbarui_nama_driver_entry.grid(row=2, column=1)

        tk.Label(self.update_frame, text="Kapasitas", anchor="w").grid(row=3, column=0, sticky="w")
        self.perbarui_kapasitas_entry = tk.Entry(self.update_frame)
        self.perbarui_kapasitas_entry.grid(row=3, column=1)

        tk.Label(self.update_frame, text="Ketersediaan (True/False)", anchor="w").grid(row=4, column=0, sticky="w")
        self.perbarui_ketersediaan_entry = tk.Entry(self.update_frame)
        self.perbarui_ketersediaan_entry.grid(row=4, column=1)

        tk.Button(self.update_frame, text="Perbarui", command=self.konfirmasi_update_kendaraan).grid(row=5, columnspan=2, pady=10)


        tk.Button(self.update_frame, text="Perbarui", command=self.konfirmasi_update_kendaraan).grid(row=5, columnspan=2, pady=10)

    def konfirmasi_update_kendaraan(self):
        id_kendaraan = self.perbarui_id_kendaraan_entry.get()
        jenis_kendaraan = self.perbarui_jenis_kendaraan_entry.get()
        nama_driver = self.perbarui_nama_driver_entry.get()
        kapasitas = self.perbarui_kapasitas_entry.get()
        ketersediaan = self.perbarui_ketersediaan_entry.get()

        if not id_kendaraan:
            messagebox.showwarning("Input Error", "ID Kendaraan harus diisi!")
            return

        try:
            kapasitas = int(kapasitas) if kapasitas else None
            ketersediaan = ketersediaan.lower() == 'true' if ketersediaan else None
        except ValueError:
            messagebox.showwarning("Input Error", "Kapasitas harus berupa angka dan ketersediaan harus True atau False.")
            return

        self.manajemen_kendaraan.update_kendaraan(id_kendaraan, jenis_kendaraan, nama_driver, kapasitas, ketersediaan)
        self.update_window.destroy()

    def hapus_kendaraan(self):
        self.delete_window = tk.Toplevel(self.root)
        self.delete_window.title("Hapus Kendaraan")
        self.delete_frame = tk.Frame(self.delete_window, pady=10, padx=10)
        self.delete_frame.pack()

        tk.Label(self.delete_frame, text="ID Kendaraan").grid(row=0, column=0, sticky="e")
        self.hapus_id_kendaraan_entry = tk.Entry(self.delete_frame)
        self.hapus_id_kendaraan_entry.grid(row=0, column=1)

        tk.Button(self.delete_frame, text="Hapus", command=self.konfirmasi_hapus_kendaraan).grid(row=1, columnspan=2, pady=10)
